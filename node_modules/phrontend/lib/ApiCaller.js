'use strict';

exports.__esModule = true;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var _NetworkError = require('./NetworkError');

var _NetworkError2 = _interopRequireDefault(_NetworkError);

var _url = require('url');

var _url2 = _interopRequireDefault(_url);

var ApiCaller = (function () {
  function ApiCaller() {
    _classCallCheck(this, ApiCaller);
  }

  ApiCaller.prototype.get = function get(config) {
    config.method = 'GET';
    return this._request(config, null);
  };

  ApiCaller.prototype.post = function post(config, _reqBody) {
    config.method = 'POST';
    var reqBody = typeof _reqBody === 'string' ? _reqBody : JSON.stringify(_reqBody);
    return this._request(config, reqBody);
  };

  ApiCaller.prototype.put = function put(config, _reqBody) {
    config.method = 'PUT';
    var reqBody = typeof _reqBody === 'string' ? _reqBody : JSON.stringify(_reqBody);
    return this._request(config, reqBody);
  };

  ApiCaller.prototype['delete'] = function _delete(config) {
    config.method = 'DELETE';
    return this._request(config, null);
  };

  ApiCaller.prototype._request = function _request(config, reqBody) {
    var networkErrors = ['Failed to fetch', 'Network request failed'];

    // extract necessary fetchOptions from config
    // https://fetch.spec.whatwg.org/#requestinit
    var extracts = ['method', 'headers', 'body', 'referrer', 'mode', 'credentials', 'cache', 'redirect', 'integrity', 'window'];
    var fetchOptions = {};
    extracts.map(function (key) {
      if (typeof config[key] !== 'undefined') fetchOptions[key] = config[key];
    });

    if (reqBody) {
      fetchOptions.body = reqBody;
    }

    return fetch(_url2['default'].format(config), fetchOptions).then(function (response) {
      return response;
    }, function (err) {
      if (err instanceof TypeError && networkErrors.indexOf(err.message) !== -1) {
        return Promise.reject(new _NetworkError2['default'](err.message));
      }

      return Promise.reject(err);
    });
  };

  return ApiCaller;
})();

exports['default'] = new ApiCaller();
module.exports = exports['default'];