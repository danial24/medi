'use strict';

exports.__esModule = true;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ApiError = (function (_Error) {
  _inherits(ApiError, _Error);

  function ApiError(message, status, response) {
    _classCallCheck(this, ApiError);

    _Error.call(this, message);
    this.name = 'ApiError';
    this.message = message || 'Error in API';
    this.statusCode = status;
    this.response = response;
  }

  return ApiError;
})(Error);

ApiError.isApiError = function (err) {
  return err instanceof ApiError;
};

exports['default'] = ApiError;
module.exports = exports['default'];